package main

import (
	"fmt"
	"time"
)

// –ó–∞–¥–∞—á–∞: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
// –£—Å–ª–æ–≤–∏–µ:
// –°–æ–∑–¥–∞–π—Ç–µ –≥–∏–±–∫—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (email, SMS, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, Slack, Telegram) –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏).
// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
//     –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –Ω–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
//     –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ - –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
//     –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
//     –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
//     Graceful degradation - –µ—Å–ª–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å

type NotificationType int

const (
	InfoNotification NotificationType = iota
	WarningNotification
	ErrorNotification
	CriticalNotification
)

type Notification struct {
	ID        string
	Type      NotificationType
	Title     string
	Message   string
	Recipient string
	Timestamp time.Time
	Metadata  map[string]interface{}
}

// –í–∞—à–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å...
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
type Sender interface {
	Send(not Notification) error
	GetName() string
	CanHandle(notType NotificationType) bool
}

type NotificationSystem interface {
	RegisterChannel(string, sender Sender)
	Send(not Notification) SendResult
	SetRoutingRules(rules RoutingRules)
	GetStatistics() Statistics
}

type SendResult struct {
	SuccessCount int
	ErrorCount   int
	Errors       map[string]error
}

type RoutingRules struct {
	Rules map[NotificationType][]string // –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -> —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
}

type Statistics struct {
	TotalSent    int
	TotalError   int
	ChannelStats map[string]int
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è NotificationService
type NotificationService struct {
	channels map[string]Sender // –ö–∞—Ä—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
	rules    RoutingRules      // –ü—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
	stats    Statistics        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
}

func (ns *NotificationService) SetRoutingRules(rules RoutingRules) {
	ns.rules = rules
	fmt.Println("–ü—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
}

func (ns *NotificationService) GetStatistics() Statistics {
	return ns.stats
}

// 5. –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
type EmailSender struct {
	smtpServer string
}

func NewEmailSender(smtpServer string) *EmailSender {
	return &EmailSender{smtpServer: smtpServer}
}

func (e *EmailSender) Send(notification Notification) error {
	// –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
	fmt.Printf("üìß EMAIL [%s]: %s - %s\n", notification.Recipient, notification.Title, notification.Message)
	time.Sleep(100 * time.Millisecond) // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
	return nil
}

func (e *EmailSender) GetName() string {
	return fmt.Sprintf("Email Server (%s)", e.smtpServer)
}

func (e *EmailSender) CanHandle(notificationType NotificationType) bool {
	// Email –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	return true
}

type SMSSender struct {
	apiURL string
}

func NewSMSSender(apiURL string) *SMSSender {
	return &SMSSender{apiURL: apiURL}
}

func (s *SMSSender) Send(notification Notification) error {
	// SMS —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
	fmt.Printf("üì± SMS [%s]: %s\n", notification.Recipient, notification.Message)
	time.Sleep(200 * time.Millisecond)
	return nil
}

func (s *SMSSender) GetName() string {
	return fmt.Sprintf("SMS Service (%s)", s.apiURL)
}

func (s *SMSSender) CanHandle(notificationType NotificationType) bool {
	// SMS —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
	return notificationType >= WarningNotification
}

type SlackSender struct {
	webhookURL string
}

func NewSlackSender(webhookURL string) *SlackSender {
	return &SlackSender{webhookURL: webhookURL}
}

func (sl *SlackSender) Send(notification Notification) error {
	emoji := map[NotificationType]string{
		InfoNotification:     "‚ÑπÔ∏è",
		WarningNotification:  "‚ö†Ô∏è",
		ErrorNotification:    "‚ùå",
		CriticalNotification: "üö®",
	}

	fmt.Printf("üí¨ SLACK: %s %s - %s\n", emoji[notification.Type], notification.Title, notification.Message)
	time.Sleep(150 * time.Millisecond)
	return nil
}

func (sl *SlackSender) GetName() string {
	return "Slack Webhook"
}

func (sl *SlackSender) CanHandle(notificationType NotificationType) bool {
	// Slack –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤, –∫—Ä–æ–º–µ –æ–±—ã—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	return notificationType > InfoNotification
}

type ConsoleSender struct{}

func NewConsoleSender() *ConsoleSender {
	return &ConsoleSender{}
}

func (c *ConsoleSender) Send(notification Notification) error {
	fmt.Printf("üñ•Ô∏è  CONSOLE: [%v] %s - %s (to: %s)\n",
		notification.Type, notification.Title, notification.Message, notification.Recipient)
	return nil
}

func (c *ConsoleSender) GetName() string {
	return "Console Output"
}

func (c *ConsoleSender) CanHandle(notificationType NotificationType) bool {
	return true // Console –º–æ–∂–µ—Ç –≤—Å–µ
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
func NewNotificationService() *NotificationService {
	return &NotificationService{
		channels: make(map[string]Sender),
		rules:    RoutingRules{make(map[NotificationType][]string)},
		stats: Statistics{
			ChannelStats: make(map[string]int),
		},
	}
}

func (n *NotificationService) RegisterChannel(name string, sender Sender) {
	n.channels[name] = sender
}

func (ns *NotificationService) Send(notification Notification) SendResult {
	result := SendResult{
		Errors: make(map[string]error),
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
	channelNames := ns.getChannelsForNotification(notification.Type)

	for _, channelName := range channelNames {
		sender, exists := ns.channels[channelName]
		if !exists {
			result.ErrorCount++
			result.Errors[channelName] = fmt.Errorf("–∫–∞–Ω–∞–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω", channelName)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if !sender.CanHandle(notification.Type) {
			result.ErrorCount++
			result.Errors[channelName] = fmt.Errorf("–∫–∞–Ω–∞–ª %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∏–ø %v", channelName, notification.Type)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		err := sender.Send(notification)
		if err != nil {
			result.ErrorCount++
			result.Errors[channelName] = err
		} else {
			result.SuccessCount++
			ns.stats.ChannelStats[channelName]++
		}
	}

	ns.stats.TotalSent++
	if result.ErrorCount > 0 {
		ns.stats.TotalError++
	}

	return result
}

func (ns *NotificationService) getChannelsForNotification(notType NotificationType) []string {
	if channels, exists := ns.rules.Rules[notType]; exists {
		return channels
	}

	// –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
	var allChannels []string
	for name := range ns.channels {
		allChannels = append(allChannels, name)
	}
	return allChannels
}

func main() {
	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
	notifier := NewNotificationService()

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ (–≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç - –æ–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!)
	notifier.RegisterChannel("email", NewEmailSender("smtp.company.com"))
	notifier.RegisterChannel("sms", NewSMSSender("api.sms.com"))
	notifier.RegisterChannel("slack", NewSlackSender("webhook-url"))
	notifier.RegisterChannel("console", NewConsoleSender())

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
	rules := RoutingRules{
		Rules: map[NotificationType][]string{
			InfoNotification:     {"email", "console"},                 // –û–±—ã—á–Ω–∞—è –∏–Ω—Ñ–∞
			WarningNotification:  {"email", "slack", "console"},        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
			ErrorNotification:    {"email", "slack", "sms", "console"}, // –û—à–∏–±–∫–∏
			CriticalNotification: {"email", "slack", "sms", "console"}, // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ
		},
	}
	notifier.SetRoutingRules(rules)

	// –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notifications := []Notification{
		{ID: "1", Type: InfoNotification, Title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", Message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", Recipient: "user@example.com"},
		{ID: "2", Type: WarningNotification, Title: "–ú–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞", Message: "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", Recipient: "user@example.com"},
		{ID: "3", Type: ErrorNotification, Title: "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã", Message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", Recipient: "user@example.com"},
		{ID: "4", Type: CriticalNotification, Title: "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", Message: "–°–µ—Ä–≤–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", Recipient: "admin@company.com"},
	}

	fmt.Println("\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===")
	for _, notification := range notifications {
		result := notifier.Send(notification)
		fmt.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %s: —É—Å–ø–µ—à–Ω–æ %d, –æ—à–∏–±–æ–∫ %d\n",
			notification.ID, result.SuccessCount, result.ErrorCount)
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	fmt.Println("\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===")
	stats := notifier.GetStatistics()
	fmt.Printf("–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –æ—à–∏–±–æ–∫: %d\n", stats.TotalSent, stats.TotalError)
	for channel, count := range stats.ChannelStats {
		fmt.Printf("  %s: %d –æ—Ç–ø—Ä–∞–≤–æ–∫\n", channel, count)
	}
}
